name: CI
on:
  push:
    branches:
      - main
    tags-ignore:
      - "**"
  pull_request:
    branches:
      - "**"
    tags-ignore:
      - "**"
jobs:
  lint:
    if: ${{ ! contains(github.event.pull_request.labels.*.name, 'invalid') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 12.x
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache .pnpm-store
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-
            ${{ runner.os }}-
      - name: Setup pnpm
        uses: ./actions/setup-pnpm
      - name: Install Dependencies
        run: pnpm install
      - run: pnpm run build-only-packages
      - run: pnpm run lint
  format:
    # This condition is inverted
    if: ${{ contains(github.event.pull_request.labels.*.name, 'invalid') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 12.x
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache .pnpm-store
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-
            ${{ runner.os }}-
      - name: Setup pnpm
        uses: ./actions/setup-pnpm
      - name: Install Dependencies
        run: pnpm install
      - name: Setup dprint
        # The dprint command may fail to deserialize the wasm module.
        # This only happens on CI, and in some cases no error occurs.
        # Since we cannot identify the condition under which the error occurred,
        # we will set up the dprint command in multiple ways and start the next step in a way that does not cause the error.
        #
        # 1. Try to run the dprint command installed from npm
        # 2. If failed, directly execute the dprint binary file extracted in the npm package
        # 3. If failed, download and set up dprint from the official website.
        #    The version should be the one we are using in our project.
        #    see https://dprint.dev/ci/
        # 4. If failed, download and set up dprint from the official website.
        #    Without specifying the version, download the latest version of dprint.
        shell: bash
        run: |
          echo '::group::' ls -alp ./node_modules/.bin/dprint
                           ls -alp ./node_modules/.bin/dprint
          echo '::endgroup::'

          echo '::group::' pnpx dprint '[npm installed]'
          pnpx dprint || {
            echo '::endgroup::'

            echo '::group::' rm -rf ./node_modules/.bin/dprint
                             rm -rf ./node_modules/.bin/dprint
            echo '::endgroup::'

            echo '::group::' mv ./node_modules/dprint/dprint ./node_modules/.bin/
                             mv ./node_modules/dprint/dprint ./node_modules/.bin/
            echo '::endgroup::'

            echo '::group::' ls -alp ./node_modules/.bin/dprint
                             ls -alp ./node_modules/.bin/dprint
            echo '::endgroup::'

            echo '::group::' pnpx dprint '[npm binary]'
            pnpx dprint || {
              echo '::endgroup::'

              echo '::group::' Detect dprint version
              readonly dprintVersion="$(cat ./package.json  | jq -r '.devDependencies.dprint')"
              echo dprint version':' "${dprintVersion}"
              echo '::endgroup::'

              echo '::group::' Install dprint
              curl -fsSL https://dprint.dev/install.sh | sh -s "${dprintVersion}"
              echo '::endgroup::'

              echo '::group::' mv "${HOME}/.dprint/bin/dprint" ./node_modules/.bin/
                               mv "${HOME}/.dprint/bin/dprint" ./node_modules/.bin/
              echo '::endgroup::'

              echo '::group::' ls -alp ./node_modules/.bin/dprint
                               ls -alp ./node_modules/.bin/dprint
              echo '::endgroup::'

              echo '::group::' pnpx dprint '[download from official with version]'
              pnpx dprint || {
                echo '::endgroup::'

                echo '::group::' Install dprint
                curl -fsSL https://dprint.dev/install.sh | sh -s
                echo '::endgroup::'

                echo '::group::' mv "${HOME}/.dprint/bin/dprint" ./node_modules/.bin/
                                 mv "${HOME}/.dprint/bin/dprint" ./node_modules/.bin/
                echo '::endgroup::'

                echo '::group::' ls -alp ./node_modules/.bin/dprint
                                 ls -alp ./node_modules/.bin/dprint
                echo '::endgroup::'

                echo '::group::' pnpx dprint '[download from official with latest version]'
                pnpx dprint
              }
            }
          }
          echo '::endgroup::'
      - run: pnpm run build-only-packages
      - run: pnpx run-p 'fmt:!(xs)'
      - name: Check changes
        if: ${{ always() }}
        run: git diff --name-only --exit-code
  build:
    if: ${{ ! contains(github.event.pull_request.labels.*.name, 'invalid') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 12.x
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache .pnpm-store
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-
            ${{ runner.os }}-
      - name: Setup pnpm
        uses: ./actions/setup-pnpm
      - name: Install Dependencies
        run: pnpm install
      - name: Install flatbuffers
        # https://snapcraft.io/flatbuffers
        run: |
          sudo snap install flatbuffers
          flatc --version
      - name: Setup Protocol Buffers compiler
        uses: arduino/setup-protoc@v1
        with:
          version: 3.15.8
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Show Protocol Buffers compiler version
        run: protoc --version
      - run: pnpx npm-run-all build-all --parallel 'build-!(all|only-packages)'
      - name: Check changes
        if: ${{ always() }}
        run: git diff --name-only --exit-code
      - name: Check new files
        if: ${{ always() }}
        run: |
          # Let "git diff" command recognize the new file.
          # see https://stackoverflow.com/a/857696/4907315
          git add -N .
          git diff --name-only --exit-code
  unit-test:
    if: ${{ ! contains(github.event.pull_request.labels.*.name, 'invalid') }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - 12.x
          - 14.x
          - 15.x
          - 16.x
    steps:
      - uses: actions/checkout@v2
      - name: Git Setting
        run: |
          git config --global user.name  CI
          git config --global user.email dummy@example.com
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache .pnpm-store
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-
            ${{ runner.os }}-
      - name: Setup pnpm
        uses: ./actions/setup-pnpm
      - name: Install Dependencies
        run: pnpm install
      - run: pnpm run build-only-packages
      - run: pnpm run test-only
  complete:
    # see https://github.community/t/status-check-for-a-matrix-jobs/127354/7
    name: Complete CI
    needs: [lint, format, build, unit-test]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: debug
        run: |
          echo 'needs.*.result' '${{ toJSON(needs.*.result) }}'
          echo "contains(needs.*.result, 'failure')" '${{ contains(needs.*.result, 'failure') }}'
          echo "contains(needs.*.result, 'cancelled')" '${{ contains(needs.*.result, 'cancelled') }}'
      - name: Check all job status
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        run: exit 1
