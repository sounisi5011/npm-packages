name: CI
on:
  push:
    branches:
      - main
    tags-ignore:
      - "**"
  pull_request:
    branches:
      - "**"
    tags-ignore:
      - "**"
jobs:
  if-run-ci:
    # see https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#needs-context
    # see https://stackoverflow.com/a/67532120/4907315
    if: >-
      ${{
        ! (
             contains(github.event.pull_request.labels.*.name, 'invalid')
          || contains(github.event.pull_request.labels.*.name, 'skip ci')
        )
      }}
    runs-on: ubuntu-latest
    steps:
      - name: Check GitHub API rate limit
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # https://shogo82148.github.io/blog/2020/10/23/github-bot-using-actions/
        # https://stackoverflow.com/a/59352240/4907315
        # https://docs.github.com/ja/actions/learn-github-actions/workflow-commands-for-github-actions
        # https://qiita.com/ryo0301/items/de8ce43fe61ede66f80a
        # https://stedolan.github.io/jq/manual/v1.6/#keys,keys_unsorted
        # https://qiita.com/richmikan@github/items/2aee77ae13bee2c648f4
        # https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary
        run: |
          readonly DATE_FORMAT='+%Y/%m/%d %T %Z'
          readonly RATE_LIMIT_JSON="$(gh api 'rate_limit')"

          {
            echo '# GitHub API rate limit'
            echo
            echo '<table><tr><th>Type</th><th>Used</th><th>Remaining</th><th>Reset time</th><th>Raw Response</th></tr>'
          } >> "${GITHUB_STEP_SUMMARY}"
          echo "${RATE_LIMIT_JSON}" | jq -r '.resources | keys_unsorted[]' | while read -r type; do
            rate_limit_json_per_type="$(echo "${RATE_LIMIT_JSON}" | jq ".resources.${type}")"
            rate_limit_max="$(echo "${rate_limit_json_per_type}" | jq -r ".limit")"
            rate_limit_reset_time="$(date -ud "@$(echo "${rate_limit_json_per_type}" | jq -r ".reset")" "${DATE_FORMAT}")"

            echo '::group::' "${type}"
            echo "${rate_limit_json_per_type}"
            echo "::notice::Reset time is ${rate_limit_reset_time} ("${type}")"
            echo '::endgroup::'

            {
              echo "<tr><th>${type}</th>"
              echo "<td>$(echo "${rate_limit_json_per_type}" | jq -r ".used")/${rate_limit_max}</td>"
              echo "<td>$(echo "${rate_limit_json_per_type}" | jq -r ".remaining")/${rate_limit_max}</td>"
              echo "<td>${rate_limit_reset_time}</td>"
              echo "<td><details><pre lang=json>${rate_limit_json_per_type}</pre></details></td></tr>"
            } >> "${GITHUB_STEP_SUMMARY}"
          done
          {
            echo '</table>'
            echo '<details><summary>Raw Response</summary><pre lang=json>'
            echo "${RATE_LIMIT_JSON}" | jq .
            echo '</pre></details>'
          } >> "${GITHUB_STEP_SUMMARY}"

          core_remaining="$(echo "${RATE_LIMIT_JSON}" | jq -r ".resources.core.remaining")"
          if [ "${core_remaining}" == 0 ]; then
            core_reset="$(echo "${RATE_LIMIT_JSON}" | jq -r ".resources.core.reset")"
            echo "::error::Rate limit reached. Please wait until $(date -ud "@${core_reset}" "${DATE_FORMAT}")"
            exit 1
          elif [ "${core_remaining}" -lt 10 ]; then
            echo "::warning::The rate limit is approaching: core.remaining=${core_remaining}"
          fi
  lint:
    needs: if-run-ci
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 16.x
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache .pnpm-store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-
            ${{ runner.os }}-
      - name: Cache actionlint
        uses: actions/cache@v3
        with:
          path: |
            ./scripts/actionlint/actionlint
            ./scripts/actionlint/actionlint.exe
            ./scripts/actionlint/download-actionlint.bash
            ./scripts/actionlint/download-actionlint.bash.http-cache-metadata.json
          key: actionlint-${{ runner.os }}
      - name: Setup pnpm
        uses: ./actions/setup-pnpm
      - name: Install Dependencies
        run: pnpm install
      - run: pnpm run build-only-packages
      - run: pnpm run lint
  format:
    needs: if-run-ci
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 16.x
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache .pnpm-store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-
            ${{ runner.os }}-
      - name: Setup pnpm
        uses: ./actions/setup-pnpm
      - name: Install Dependencies
        run: pnpm install
      - name: Setup dprint
        # The dprint command may fail to deserialize the wasm module.
        # This only happens on CI, and in some cases no error occurs.
        # Since we cannot identify the condition under which the error occurred,
        # we will set up the dprint command in multiple ways and start the next step in a way that does not cause the error.
        #
        # 1. Try to run the dprint command installed from npm
        # 2. If failed, directly execute the dprint binary file extracted in the npm package
        # 3. If failed, download and set up dprint from the official website.
        #    The version should be the one we are using in our project.
        #    see https://dprint.dev/ci/
        # 4. If failed, download and set up dprint from the official website.
        #    Without specifying the version, download the latest version of dprint.
        shell: bash
        run: |
          echo '::group::' ls -alp ./node_modules/.bin/dprint
                           ls -alp ./node_modules/.bin/dprint
          echo '::endgroup::'

          echo '::group::' pnpm exec dprint '[npm installed]'
          pnpm exec dprint || {
            echo '::endgroup::'

            echo '::group::' rm -rf ./node_modules/.bin/dprint
                             rm -rf ./node_modules/.bin/dprint
            echo '::endgroup::'

            echo '::group::' mv ./node_modules/dprint/dprint ./node_modules/.bin/
                             mv ./node_modules/dprint/dprint ./node_modules/.bin/
            echo '::endgroup::'

            echo '::group::' ls -alp ./node_modules/.bin/dprint
                             ls -alp ./node_modules/.bin/dprint
            echo '::endgroup::'

            echo '::group::' pnpm exec dprint '[npm binary]'
            pnpm exec dprint || {
              echo '::endgroup::'

              echo '::group::' Detect dprint version
              readonly dprintVersion="$(< ./package.json jq -r '.devDependencies.dprint')"
              echo dprint version':' "${dprintVersion}"
              echo '::endgroup::'

              echo '::group::' Install dprint
              curl -fsSL https://dprint.dev/install.sh | sh -s "${dprintVersion}"
              echo '::endgroup::'

              echo '::group::' mv "${HOME}/.dprint/bin/dprint" ./node_modules/.bin/
                               mv "${HOME}/.dprint/bin/dprint" ./node_modules/.bin/
              echo '::endgroup::'

              echo '::group::' ls -alp ./node_modules/.bin/dprint
                               ls -alp ./node_modules/.bin/dprint
              echo '::endgroup::'

              echo '::group::' pnpm exec dprint '[download from official with version]'
              pnpm exec dprint || {
                echo '::endgroup::'

                echo '::group::' Install dprint
                curl -fsSL https://dprint.dev/install.sh | sh -s
                echo '::endgroup::'

                echo '::group::' mv "${HOME}/.dprint/bin/dprint" ./node_modules/.bin/
                                 mv "${HOME}/.dprint/bin/dprint" ./node_modules/.bin/
                echo '::endgroup::'

                echo '::group::' ls -alp ./node_modules/.bin/dprint
                                 ls -alp ./node_modules/.bin/dprint
                echo '::endgroup::'

                echo '::group::' pnpm exec dprint '[download from official with latest version]'
                pnpm exec dprint
              }
            }
          }
          echo '::endgroup::'
      - run: pnpm run build-only-packages
      - run: pnpm run fmt
      - name: Check changes
        if: ${{ always() }}
        run: git diff --name-only --exit-code
  build:
    needs: if-run-ci
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 16.x
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache .pnpm-store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-
            ${{ runner.os }}-
      - name: Setup pnpm
        uses: ./actions/setup-pnpm
      - name: Install Dependencies
        run: pnpm install
      - name: Install flatbuffers
        # https://snapcraft.io/flatbuffers
        run: |
          sudo snap install flatbuffers
          flatc --version
      - name: Setup Protocol Buffers compiler
        uses: arduino/setup-protoc@v1
        with:
          version: 3.15.8
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Show Protocol Buffers compiler version
        run: protoc --version
      - run: pnpm exec npm-run-all build-all --parallel 'build-!(all|only-packages)'
      - name: Check changes
        if: ${{ always() }}
        shell: bash
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
        # https://footaku.hatenablog.com/entry/2018/09/03/140000
        # https://qiita.com/richmikan@github/items/2aee77ae13bee2c648f4
        # https://www.cyberciti.biz/faq/unix-linux-shell-removing-duplicate-lines/
        run: |
          print_diff() {
            local -r title="$1"
            local -r diffText="$2"

            if [ -z "${diffText}" ]; then
              echo "::group::${title} / 0 file"
            else
              echo "::group::${title} / $(echo "${diffText}" | wc -l) files"
              echo "${diffText}"
            fi
            echo '::endgroup::'
          }

          pathspecArray=()
          while read -r filePattern; do
            if [ -n "${filePattern}" ]; then
              pathspecArray+=(":(top,glob,exclude)${filePattern}")
            fi
          done < <(node .github/workflows/ci/read-build-changes-check-exclusion-list-from-pr-body.js)

          if [ "${#pathspecArray[@]}" -ne 0 ]; then
            echo '::group::exclude pathspecs'
            for pathspec in "${pathspecArray[@]}"; do
              echo "${pathspec}"
            done
            echo '::endgroup::'
          fi

          readonly changesText="$(git diff --name-only -- "${pathspecArray[@]}")"
          print_diff 'changed files' "${changesText}"
          if [ "${#pathspecArray[@]}" -ne 0 ]; then
            readonly changesTextIgnoreExclude="$(git diff --name-only)"
            print_diff 'changed files (ignore exclude list)' "${changesTextIgnoreExclude}"
          fi

          # Let "git diff" command recognize the new file.
          # see https://stackoverflow.com/a/857696/4907315
          git add -N .
          readonly newFilesText="$(echo "${changesText}"$'\n\n'"$(git diff --name-only -- "${pathspecArray[@]}")" | sort | uniq -u)"
          print_diff 'new files' "${newFilesText}"
          if [ "${#pathspecArray[@]}" -ne 0 ]; then
            readonly newFilesTextIgnoreExclude="$(echo "${changesTextIgnoreExclude}"$'\n\n'"$(git diff --name-only)" | sort | uniq -u)"
            print_diff 'new files (ignore exclude list)' "${newFilesTextIgnoreExclude}"
          fi

          if [ -n "${changesText}" ] || [ -n "${newFilesText}" ]; then
            exit 1
          else
            echo '::notice::No uncommitted changes by build'
          fi
  unit-test:
    needs: if-run-ci
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - 12.x
          - 14.x
          - 15.x
          - 16.x
          - 17.x
          - 18.x
    steps:
      - uses: actions/checkout@v3
      - name: Git Setting
        run: |
          git config --global user.name  CI
          git config --global user.email dummy@example.com
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache .pnpm-store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-
            ${{ runner.os }}-
      - name: Setup pnpm
        uses: ./actions/setup-pnpm
      - name: Install Dependencies
        run: pnpm install
      - run: pnpm run build-only-packages
      - run: pnpm run test-only
  complete:
    # see https://github.community/t/status-check-for-a-matrix-jobs/127354/7
    name: Complete CI
    needs: [lint, format, build, unit-test]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Check all job status
        # see https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#needs-context
        # see https://stackoverflow.com/a/67532120/4907315
        if: >-
          ${{
               contains(needs.*.result, 'failure')
            || contains(needs.*.result, 'cancelled')
            || contains(needs.*.result, 'skipped')
          }}
        run: exit 1
