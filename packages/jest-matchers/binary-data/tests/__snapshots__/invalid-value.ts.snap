// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`.toBeByteSize() invalid type actual & expected expect(actual = "").not.toBeByteSize(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"\\"</>

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = "").toBeByteSize(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"\\"</>

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = "42").not.toBeByteSize(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"42\\"</>

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = "42").toBeByteSize(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"42\\"</>

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = "foo").not.toBeByteSize(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"foo\\"</>

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = "foo").toBeByteSize(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"foo\\"</>

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = /bar/).not.toBeByteSize(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  regexp
Received has value: <red>/bar/</>

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = /bar/).toBeByteSize(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  regexp
Received has value: <red>/bar/</>

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = []).not.toBeByteSize(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  array
Received has value: <red>[]</>

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = []).toBeByteSize(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  array
Received has value: <red>[]</>

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = [Function anonymous]).not.toBeByteSize(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  function
Received has value: <red>[Function anonymous]</>

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = [Function anonymous]).toBeByteSize(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  function
Received has value: <red>[Function anonymous]</>

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = {}).not.toBeByteSize(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  object
Received has value: <red>{}</>

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = {}).toBeByteSize(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  object
Received has value: <red>{}</>

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = -0).not.toBeByteSize(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-0</>

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = -0).toBeByteSize(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-0</>

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = -1).not.toBeByteSize(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-1</>

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = -1).toBeByteSize(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-1</>

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = -1n).not.toBeByteSize(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  bigint
Received has value: <red>-1n</>

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = -1n).toBeByteSize(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  bigint
Received has value: <red>-1n</>

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = -Infinity).not.toBeByteSize(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-Infinity</>

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = -Infinity).toBeByteSize(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-Infinity</>

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = 0.1).not.toBeByteSize(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>0.1</>

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = 0.1).toBeByteSize(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>0.1</>

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = Infinity).not.toBeByteSize(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>Infinity</>

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = Infinity).toBeByteSize(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>Infinity</>

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = NaN).not.toBeByteSize(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>NaN</>

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = NaN).toBeByteSize(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>NaN</>

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = Symbol(vore)).not.toBeByteSize(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  symbol
Received has value: <red>Symbol(vore)</>

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = Symbol(vore)).toBeByteSize(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  symbol
Received has value: <red>Symbol(vore)</>

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = false).not.toBeByteSize(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>false</>

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = false).toBeByteSize(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>false</>

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = null).not.toBeByteSize(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has value: <red>null</>

Expected has value: <green>null</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = null).toBeByteSize(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has value: <red>null</>

Expected has value: <green>null</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = true).not.toBeByteSize(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>true</>

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = true).toBeByteSize(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>true</>

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = undefined).not.toBeByteSize(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has value: <red>undefined</>

Expected has value: <green>undefined</>"
`;

exports[`.toBeByteSize() invalid type actual & expected expect(actual = undefined).toBeByteSize(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has value: <red>undefined</>

Expected has value: <green>undefined</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = "").not.toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"\\"</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = "").toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"\\"</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = "42").not.toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"42\\"</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = "42").toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"42\\"</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = "foo").not.toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"foo\\"</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = "foo").toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"foo\\"</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = /bar/).not.toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  regexp
Received has value: <red>/bar/</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = /bar/).toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  regexp
Received has value: <red>/bar/</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = []).not.toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  array
Received has value: <red>[]</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = []).toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  array
Received has value: <red>[]</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = [Function anonymous]).not.toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  function
Received has value: <red>[Function anonymous]</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = [Function anonymous]).toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  function
Received has value: <red>[Function anonymous]</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = {}).not.toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  object
Received has value: <red>{}</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = {}).toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  object
Received has value: <red>{}</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = -0).not.toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-0</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = -0).toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-0</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = -1).not.toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-1</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = -1).toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-1</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = -1n).not.toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  bigint
Received has value: <red>-1n</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = -1n).toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  bigint
Received has value: <red>-1n</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = -Infinity).not.toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-Infinity</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = -Infinity).toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-Infinity</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = 0.1).not.toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>0.1</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = 0.1).toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>0.1</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = Infinity).not.toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>Infinity</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = Infinity).toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>Infinity</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = NaN).not.toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>NaN</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = NaN).toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>NaN</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = Symbol(vore)).not.toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  symbol
Received has value: <red>Symbol(vore)</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = Symbol(vore)).toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  symbol
Received has value: <red>Symbol(vore)</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = false).not.toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>false</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = false).toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>false</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = null).not.toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has value: <red>null</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = null).toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has value: <red>null</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = true).not.toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>true</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = true).toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>true</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = undefined).not.toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has value: <red>undefined</>"
`;

exports[`.toBeByteSize() invalid type actual expect(actual = undefined).toBeByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has value: <red>undefined</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).not.toBeByteSize(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).not.toBeByteSize(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).not.toBeByteSize(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).not.toBeByteSize(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).not.toBeByteSize(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).not.toBeByteSize(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).not.toBeByteSize(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).not.toBeByteSize(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).not.toBeByteSize(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).not.toBeByteSize(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).not.toBeByteSize(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).not.toBeByteSize(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).not.toBeByteSize(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).not.toBeByteSize(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).not.toBeByteSize(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).not.toBeByteSize(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).not.toBeByteSize(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has value: <green>null</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).not.toBeByteSize(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).not.toBeByteSize(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has value: <green>undefined</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).toBeByteSize(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).toBeByteSize(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).toBeByteSize(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).toBeByteSize(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).toBeByteSize(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).toBeByteSize(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).toBeByteSize(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).toBeByteSize(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).toBeByteSize(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).toBeByteSize(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).toBeByteSize(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).toBeByteSize(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).toBeByteSize(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).toBeByteSize(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).toBeByteSize(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).toBeByteSize(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).toBeByteSize(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has value: <green>null</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).toBeByteSize(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBeByteSize() invalid type expected expect(…).toBeByteSize(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has value: <green>undefined</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = "").not.toBeGreaterThanByteSize(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"\\"</>

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = "").toBeGreaterThanByteSize(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"\\"</>

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = "42").not.toBeGreaterThanByteSize(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"42\\"</>

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = "42").toBeGreaterThanByteSize(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"42\\"</>

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = "foo").not.toBeGreaterThanByteSize(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"foo\\"</>

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = "foo").toBeGreaterThanByteSize(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"foo\\"</>

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = /bar/).not.toBeGreaterThanByteSize(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  regexp
Received has value: <red>/bar/</>

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = /bar/).toBeGreaterThanByteSize(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  regexp
Received has value: <red>/bar/</>

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = []).not.toBeGreaterThanByteSize(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  array
Received has value: <red>[]</>

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = []).toBeGreaterThanByteSize(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  array
Received has value: <red>[]</>

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = [Function anonymous]).not.toBeGreaterThanByteSize(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  function
Received has value: <red>[Function anonymous]</>

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = [Function anonymous]).toBeGreaterThanByteSize(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  function
Received has value: <red>[Function anonymous]</>

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = {}).not.toBeGreaterThanByteSize(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  object
Received has value: <red>{}</>

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = {}).toBeGreaterThanByteSize(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  object
Received has value: <red>{}</>

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = -0).not.toBeGreaterThanByteSize(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-0</>

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = -0).toBeGreaterThanByteSize(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-0</>

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = -1).not.toBeGreaterThanByteSize(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-1</>

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = -1).toBeGreaterThanByteSize(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-1</>

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = -1n).not.toBeGreaterThanByteSize(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  bigint
Received has value: <red>-1n</>

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = -1n).toBeGreaterThanByteSize(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  bigint
Received has value: <red>-1n</>

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = -Infinity).not.toBeGreaterThanByteSize(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-Infinity</>

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = -Infinity).toBeGreaterThanByteSize(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-Infinity</>

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = 0.1).not.toBeGreaterThanByteSize(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>0.1</>

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = 0.1).toBeGreaterThanByteSize(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>0.1</>

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = Infinity).not.toBeGreaterThanByteSize(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>Infinity</>

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = Infinity).toBeGreaterThanByteSize(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>Infinity</>

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = NaN).not.toBeGreaterThanByteSize(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>NaN</>

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = NaN).toBeGreaterThanByteSize(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>NaN</>

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = Symbol(vore)).not.toBeGreaterThanByteSize(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  symbol
Received has value: <red>Symbol(vore)</>

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = Symbol(vore)).toBeGreaterThanByteSize(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  symbol
Received has value: <red>Symbol(vore)</>

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = false).not.toBeGreaterThanByteSize(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>false</>

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = false).toBeGreaterThanByteSize(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>false</>

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = null).not.toBeGreaterThanByteSize(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has value: <red>null</>

Expected has value: <green>null</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = null).toBeGreaterThanByteSize(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has value: <red>null</>

Expected has value: <green>null</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = true).not.toBeGreaterThanByteSize(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>true</>

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = true).toBeGreaterThanByteSize(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>true</>

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = undefined).not.toBeGreaterThanByteSize(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has value: <red>undefined</>

Expected has value: <green>undefined</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual & expected expect(actual = undefined).toBeGreaterThanByteSize(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has value: <red>undefined</>

Expected has value: <green>undefined</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = "").not.toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"\\"</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = "").toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"\\"</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = "42").not.toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"42\\"</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = "42").toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"42\\"</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = "foo").not.toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"foo\\"</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = "foo").toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"foo\\"</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = /bar/).not.toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  regexp
Received has value: <red>/bar/</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = /bar/).toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  regexp
Received has value: <red>/bar/</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = []).not.toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  array
Received has value: <red>[]</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = []).toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  array
Received has value: <red>[]</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = [Function anonymous]).not.toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  function
Received has value: <red>[Function anonymous]</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = [Function anonymous]).toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  function
Received has value: <red>[Function anonymous]</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = {}).not.toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  object
Received has value: <red>{}</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = {}).toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  object
Received has value: <red>{}</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = -0).not.toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-0</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = -0).toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-0</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = -1).not.toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-1</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = -1).toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-1</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = -1n).not.toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  bigint
Received has value: <red>-1n</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = -1n).toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  bigint
Received has value: <red>-1n</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = -Infinity).not.toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-Infinity</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = -Infinity).toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-Infinity</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = 0.1).not.toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>0.1</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = 0.1).toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>0.1</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = Infinity).not.toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>Infinity</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = Infinity).toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>Infinity</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = NaN).not.toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>NaN</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = NaN).toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>NaN</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = Symbol(vore)).not.toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  symbol
Received has value: <red>Symbol(vore)</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = Symbol(vore)).toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  symbol
Received has value: <red>Symbol(vore)</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = false).not.toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>false</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = false).toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>false</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = null).not.toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has value: <red>null</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = null).toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has value: <red>null</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = true).not.toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>true</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = true).toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>true</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = undefined).not.toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has value: <red>undefined</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type actual expect(actual = undefined).toBeGreaterThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has value: <red>undefined</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).not.toBeGreaterThanByteSize(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).not.toBeGreaterThanByteSize(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).not.toBeGreaterThanByteSize(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).not.toBeGreaterThanByteSize(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).not.toBeGreaterThanByteSize(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).not.toBeGreaterThanByteSize(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).not.toBeGreaterThanByteSize(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).not.toBeGreaterThanByteSize(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).not.toBeGreaterThanByteSize(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).not.toBeGreaterThanByteSize(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).not.toBeGreaterThanByteSize(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).not.toBeGreaterThanByteSize(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).not.toBeGreaterThanByteSize(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).not.toBeGreaterThanByteSize(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).not.toBeGreaterThanByteSize(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).not.toBeGreaterThanByteSize(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).not.toBeGreaterThanByteSize(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has value: <green>null</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).not.toBeGreaterThanByteSize(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).not.toBeGreaterThanByteSize(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has value: <green>undefined</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).toBeGreaterThanByteSize(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).toBeGreaterThanByteSize(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).toBeGreaterThanByteSize(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).toBeGreaterThanByteSize(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).toBeGreaterThanByteSize(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).toBeGreaterThanByteSize(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).toBeGreaterThanByteSize(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).toBeGreaterThanByteSize(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).toBeGreaterThanByteSize(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).toBeGreaterThanByteSize(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).toBeGreaterThanByteSize(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).toBeGreaterThanByteSize(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).toBeGreaterThanByteSize(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).toBeGreaterThanByteSize(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).toBeGreaterThanByteSize(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).toBeGreaterThanByteSize(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).toBeGreaterThanByteSize(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has value: <green>null</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).toBeGreaterThanByteSize(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBeGreaterThanByteSize() invalid type expected expect(…).toBeGreaterThanByteSize(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has value: <green>undefined</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = "").not.toBeGreaterThanOrEqualByteSize(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"\\"</>

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = "").toBeGreaterThanOrEqualByteSize(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"\\"</>

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = "42").not.toBeGreaterThanOrEqualByteSize(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"42\\"</>

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = "42").toBeGreaterThanOrEqualByteSize(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"42\\"</>

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = "foo").not.toBeGreaterThanOrEqualByteSize(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"foo\\"</>

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = "foo").toBeGreaterThanOrEqualByteSize(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"foo\\"</>

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = /bar/).not.toBeGreaterThanOrEqualByteSize(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  regexp
Received has value: <red>/bar/</>

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = /bar/).toBeGreaterThanOrEqualByteSize(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  regexp
Received has value: <red>/bar/</>

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = []).not.toBeGreaterThanOrEqualByteSize(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  array
Received has value: <red>[]</>

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = []).toBeGreaterThanOrEqualByteSize(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  array
Received has value: <red>[]</>

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = [Function anonymous]).not.toBeGreaterThanOrEqualByteSize(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  function
Received has value: <red>[Function anonymous]</>

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = [Function anonymous]).toBeGreaterThanOrEqualByteSize(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  function
Received has value: <red>[Function anonymous]</>

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = {}).not.toBeGreaterThanOrEqualByteSize(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  object
Received has value: <red>{}</>

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = {}).toBeGreaterThanOrEqualByteSize(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  object
Received has value: <red>{}</>

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = -0).not.toBeGreaterThanOrEqualByteSize(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-0</>

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = -0).toBeGreaterThanOrEqualByteSize(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-0</>

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = -1).not.toBeGreaterThanOrEqualByteSize(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-1</>

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = -1).toBeGreaterThanOrEqualByteSize(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-1</>

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = -1n).not.toBeGreaterThanOrEqualByteSize(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  bigint
Received has value: <red>-1n</>

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = -1n).toBeGreaterThanOrEqualByteSize(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  bigint
Received has value: <red>-1n</>

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = -Infinity).not.toBeGreaterThanOrEqualByteSize(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-Infinity</>

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = -Infinity).toBeGreaterThanOrEqualByteSize(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-Infinity</>

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = 0.1).not.toBeGreaterThanOrEqualByteSize(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>0.1</>

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = 0.1).toBeGreaterThanOrEqualByteSize(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>0.1</>

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = Infinity).not.toBeGreaterThanOrEqualByteSize(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>Infinity</>

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = Infinity).toBeGreaterThanOrEqualByteSize(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>Infinity</>

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = NaN).not.toBeGreaterThanOrEqualByteSize(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>NaN</>

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = NaN).toBeGreaterThanOrEqualByteSize(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>NaN</>

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = Symbol(vore)).not.toBeGreaterThanOrEqualByteSize(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  symbol
Received has value: <red>Symbol(vore)</>

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = Symbol(vore)).toBeGreaterThanOrEqualByteSize(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  symbol
Received has value: <red>Symbol(vore)</>

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = false).not.toBeGreaterThanOrEqualByteSize(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>false</>

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = false).toBeGreaterThanOrEqualByteSize(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>false</>

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = null).not.toBeGreaterThanOrEqualByteSize(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has value: <red>null</>

Expected has value: <green>null</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = null).toBeGreaterThanOrEqualByteSize(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has value: <red>null</>

Expected has value: <green>null</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = true).not.toBeGreaterThanOrEqualByteSize(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>true</>

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = true).toBeGreaterThanOrEqualByteSize(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>true</>

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = undefined).not.toBeGreaterThanOrEqualByteSize(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has value: <red>undefined</>

Expected has value: <green>undefined</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual & expected expect(actual = undefined).toBeGreaterThanOrEqualByteSize(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has value: <red>undefined</>

Expected has value: <green>undefined</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = "").not.toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"\\"</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = "").toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"\\"</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = "42").not.toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"42\\"</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = "42").toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"42\\"</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = "foo").not.toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"foo\\"</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = "foo").toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"foo\\"</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = /bar/).not.toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  regexp
Received has value: <red>/bar/</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = /bar/).toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  regexp
Received has value: <red>/bar/</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = []).not.toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  array
Received has value: <red>[]</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = []).toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  array
Received has value: <red>[]</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = [Function anonymous]).not.toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  function
Received has value: <red>[Function anonymous]</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = [Function anonymous]).toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  function
Received has value: <red>[Function anonymous]</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = {}).not.toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  object
Received has value: <red>{}</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = {}).toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  object
Received has value: <red>{}</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = -0).not.toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-0</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = -0).toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-0</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = -1).not.toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-1</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = -1).toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-1</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = -1n).not.toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  bigint
Received has value: <red>-1n</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = -1n).toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  bigint
Received has value: <red>-1n</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = -Infinity).not.toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-Infinity</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = -Infinity).toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-Infinity</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = 0.1).not.toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>0.1</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = 0.1).toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>0.1</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = Infinity).not.toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>Infinity</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = Infinity).toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>Infinity</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = NaN).not.toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>NaN</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = NaN).toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>NaN</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = Symbol(vore)).not.toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  symbol
Received has value: <red>Symbol(vore)</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = Symbol(vore)).toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  symbol
Received has value: <red>Symbol(vore)</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = false).not.toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>false</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = false).toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>false</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = null).not.toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has value: <red>null</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = null).toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has value: <red>null</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = true).not.toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>true</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = true).toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>true</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = undefined).not.toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has value: <red>undefined</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type actual expect(actual = undefined).toBeGreaterThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has value: <red>undefined</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).not.toBeGreaterThanOrEqualByteSize(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).not.toBeGreaterThanOrEqualByteSize(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).not.toBeGreaterThanOrEqualByteSize(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).not.toBeGreaterThanOrEqualByteSize(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).not.toBeGreaterThanOrEqualByteSize(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).not.toBeGreaterThanOrEqualByteSize(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).not.toBeGreaterThanOrEqualByteSize(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).not.toBeGreaterThanOrEqualByteSize(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).not.toBeGreaterThanOrEqualByteSize(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).not.toBeGreaterThanOrEqualByteSize(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).not.toBeGreaterThanOrEqualByteSize(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).not.toBeGreaterThanOrEqualByteSize(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).not.toBeGreaterThanOrEqualByteSize(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).not.toBeGreaterThanOrEqualByteSize(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).not.toBeGreaterThanOrEqualByteSize(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).not.toBeGreaterThanOrEqualByteSize(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).not.toBeGreaterThanOrEqualByteSize(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has value: <green>null</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).not.toBeGreaterThanOrEqualByteSize(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).not.toBeGreaterThanOrEqualByteSize(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has value: <green>undefined</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).toBeGreaterThanOrEqualByteSize(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).toBeGreaterThanOrEqualByteSize(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).toBeGreaterThanOrEqualByteSize(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).toBeGreaterThanOrEqualByteSize(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).toBeGreaterThanOrEqualByteSize(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).toBeGreaterThanOrEqualByteSize(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).toBeGreaterThanOrEqualByteSize(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).toBeGreaterThanOrEqualByteSize(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).toBeGreaterThanOrEqualByteSize(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).toBeGreaterThanOrEqualByteSize(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).toBeGreaterThanOrEqualByteSize(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).toBeGreaterThanOrEqualByteSize(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).toBeGreaterThanOrEqualByteSize(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).toBeGreaterThanOrEqualByteSize(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).toBeGreaterThanOrEqualByteSize(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).toBeGreaterThanOrEqualByteSize(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).toBeGreaterThanOrEqualByteSize(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has value: <green>null</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).toBeGreaterThanOrEqualByteSize(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBeGreaterThanOrEqualByteSize() invalid type expected expect(…).toBeGreaterThanOrEqualByteSize(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeGreaterThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has value: <green>undefined</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = "").not.toBeLessThanByteSize(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"\\"</>

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = "").toBeLessThanByteSize(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"\\"</>

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = "42").not.toBeLessThanByteSize(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"42\\"</>

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = "42").toBeLessThanByteSize(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"42\\"</>

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = "foo").not.toBeLessThanByteSize(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"foo\\"</>

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = "foo").toBeLessThanByteSize(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"foo\\"</>

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = /bar/).not.toBeLessThanByteSize(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  regexp
Received has value: <red>/bar/</>

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = /bar/).toBeLessThanByteSize(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  regexp
Received has value: <red>/bar/</>

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = []).not.toBeLessThanByteSize(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  array
Received has value: <red>[]</>

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = []).toBeLessThanByteSize(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  array
Received has value: <red>[]</>

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = [Function anonymous]).not.toBeLessThanByteSize(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  function
Received has value: <red>[Function anonymous]</>

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = [Function anonymous]).toBeLessThanByteSize(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  function
Received has value: <red>[Function anonymous]</>

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = {}).not.toBeLessThanByteSize(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  object
Received has value: <red>{}</>

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = {}).toBeLessThanByteSize(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  object
Received has value: <red>{}</>

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = -0).not.toBeLessThanByteSize(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-0</>

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = -0).toBeLessThanByteSize(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-0</>

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = -1).not.toBeLessThanByteSize(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-1</>

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = -1).toBeLessThanByteSize(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-1</>

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = -1n).not.toBeLessThanByteSize(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  bigint
Received has value: <red>-1n</>

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = -1n).toBeLessThanByteSize(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  bigint
Received has value: <red>-1n</>

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = -Infinity).not.toBeLessThanByteSize(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-Infinity</>

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = -Infinity).toBeLessThanByteSize(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-Infinity</>

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = 0.1).not.toBeLessThanByteSize(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>0.1</>

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = 0.1).toBeLessThanByteSize(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>0.1</>

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = Infinity).not.toBeLessThanByteSize(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>Infinity</>

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = Infinity).toBeLessThanByteSize(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>Infinity</>

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = NaN).not.toBeLessThanByteSize(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>NaN</>

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = NaN).toBeLessThanByteSize(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>NaN</>

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = Symbol(vore)).not.toBeLessThanByteSize(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  symbol
Received has value: <red>Symbol(vore)</>

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = Symbol(vore)).toBeLessThanByteSize(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  symbol
Received has value: <red>Symbol(vore)</>

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = false).not.toBeLessThanByteSize(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>false</>

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = false).toBeLessThanByteSize(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>false</>

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = null).not.toBeLessThanByteSize(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has value: <red>null</>

Expected has value: <green>null</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = null).toBeLessThanByteSize(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has value: <red>null</>

Expected has value: <green>null</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = true).not.toBeLessThanByteSize(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>true</>

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = true).toBeLessThanByteSize(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>true</>

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = undefined).not.toBeLessThanByteSize(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has value: <red>undefined</>

Expected has value: <green>undefined</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual & expected expect(actual = undefined).toBeLessThanByteSize(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has value: <red>undefined</>

Expected has value: <green>undefined</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = "").not.toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"\\"</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = "").toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"\\"</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = "42").not.toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"42\\"</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = "42").toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"42\\"</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = "foo").not.toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"foo\\"</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = "foo").toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"foo\\"</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = /bar/).not.toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  regexp
Received has value: <red>/bar/</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = /bar/).toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  regexp
Received has value: <red>/bar/</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = []).not.toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  array
Received has value: <red>[]</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = []).toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  array
Received has value: <red>[]</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = [Function anonymous]).not.toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  function
Received has value: <red>[Function anonymous]</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = [Function anonymous]).toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  function
Received has value: <red>[Function anonymous]</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = {}).not.toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  object
Received has value: <red>{}</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = {}).toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  object
Received has value: <red>{}</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = -0).not.toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-0</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = -0).toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-0</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = -1).not.toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-1</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = -1).toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-1</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = -1n).not.toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  bigint
Received has value: <red>-1n</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = -1n).toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  bigint
Received has value: <red>-1n</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = -Infinity).not.toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-Infinity</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = -Infinity).toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-Infinity</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = 0.1).not.toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>0.1</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = 0.1).toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>0.1</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = Infinity).not.toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>Infinity</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = Infinity).toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>Infinity</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = NaN).not.toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>NaN</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = NaN).toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>NaN</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = Symbol(vore)).not.toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  symbol
Received has value: <red>Symbol(vore)</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = Symbol(vore)).toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  symbol
Received has value: <red>Symbol(vore)</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = false).not.toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>false</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = false).toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>false</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = null).not.toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has value: <red>null</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = null).toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has value: <red>null</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = true).not.toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>true</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = true).toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>true</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = undefined).not.toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has value: <red>undefined</>"
`;

exports[`.toBeLessThanByteSize() invalid type actual expect(actual = undefined).toBeLessThanByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has value: <red>undefined</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).not.toBeLessThanByteSize(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).not.toBeLessThanByteSize(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).not.toBeLessThanByteSize(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).not.toBeLessThanByteSize(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).not.toBeLessThanByteSize(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).not.toBeLessThanByteSize(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).not.toBeLessThanByteSize(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).not.toBeLessThanByteSize(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).not.toBeLessThanByteSize(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).not.toBeLessThanByteSize(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).not.toBeLessThanByteSize(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).not.toBeLessThanByteSize(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).not.toBeLessThanByteSize(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).not.toBeLessThanByteSize(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).not.toBeLessThanByteSize(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).not.toBeLessThanByteSize(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).not.toBeLessThanByteSize(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has value: <green>null</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).not.toBeLessThanByteSize(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).not.toBeLessThanByteSize(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has value: <green>undefined</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).toBeLessThanByteSize(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).toBeLessThanByteSize(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).toBeLessThanByteSize(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).toBeLessThanByteSize(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).toBeLessThanByteSize(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).toBeLessThanByteSize(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).toBeLessThanByteSize(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).toBeLessThanByteSize(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).toBeLessThanByteSize(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).toBeLessThanByteSize(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).toBeLessThanByteSize(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).toBeLessThanByteSize(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).toBeLessThanByteSize(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).toBeLessThanByteSize(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).toBeLessThanByteSize(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).toBeLessThanByteSize(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).toBeLessThanByteSize(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has value: <green>null</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).toBeLessThanByteSize(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBeLessThanByteSize() invalid type expected expect(…).toBeLessThanByteSize(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has value: <green>undefined</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = "").not.toBeLessThanOrEqualByteSize(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"\\"</>

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = "").toBeLessThanOrEqualByteSize(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"\\"</>

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = "42").not.toBeLessThanOrEqualByteSize(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"42\\"</>

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = "42").toBeLessThanOrEqualByteSize(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"42\\"</>

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = "foo").not.toBeLessThanOrEqualByteSize(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"foo\\"</>

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = "foo").toBeLessThanOrEqualByteSize(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"foo\\"</>

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = /bar/).not.toBeLessThanOrEqualByteSize(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  regexp
Received has value: <red>/bar/</>

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = /bar/).toBeLessThanOrEqualByteSize(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  regexp
Received has value: <red>/bar/</>

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = []).not.toBeLessThanOrEqualByteSize(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  array
Received has value: <red>[]</>

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = []).toBeLessThanOrEqualByteSize(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  array
Received has value: <red>[]</>

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = [Function anonymous]).not.toBeLessThanOrEqualByteSize(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  function
Received has value: <red>[Function anonymous]</>

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = [Function anonymous]).toBeLessThanOrEqualByteSize(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  function
Received has value: <red>[Function anonymous]</>

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = {}).not.toBeLessThanOrEqualByteSize(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  object
Received has value: <red>{}</>

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = {}).toBeLessThanOrEqualByteSize(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  object
Received has value: <red>{}</>

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = -0).not.toBeLessThanOrEqualByteSize(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-0</>

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = -0).toBeLessThanOrEqualByteSize(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-0</>

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = -1).not.toBeLessThanOrEqualByteSize(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-1</>

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = -1).toBeLessThanOrEqualByteSize(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-1</>

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = -1n).not.toBeLessThanOrEqualByteSize(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  bigint
Received has value: <red>-1n</>

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = -1n).toBeLessThanOrEqualByteSize(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  bigint
Received has value: <red>-1n</>

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = -Infinity).not.toBeLessThanOrEqualByteSize(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-Infinity</>

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = -Infinity).toBeLessThanOrEqualByteSize(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-Infinity</>

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = 0.1).not.toBeLessThanOrEqualByteSize(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>0.1</>

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = 0.1).toBeLessThanOrEqualByteSize(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>0.1</>

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = Infinity).not.toBeLessThanOrEqualByteSize(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>Infinity</>

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = Infinity).toBeLessThanOrEqualByteSize(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>Infinity</>

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = NaN).not.toBeLessThanOrEqualByteSize(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>NaN</>

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = NaN).toBeLessThanOrEqualByteSize(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>NaN</>

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = Symbol(vore)).not.toBeLessThanOrEqualByteSize(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  symbol
Received has value: <red>Symbol(vore)</>

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = Symbol(vore)).toBeLessThanOrEqualByteSize(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  symbol
Received has value: <red>Symbol(vore)</>

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = false).not.toBeLessThanOrEqualByteSize(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>false</>

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = false).toBeLessThanOrEqualByteSize(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>false</>

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = null).not.toBeLessThanOrEqualByteSize(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has value: <red>null</>

Expected has value: <green>null</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = null).toBeLessThanOrEqualByteSize(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has value: <red>null</>

Expected has value: <green>null</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = true).not.toBeLessThanOrEqualByteSize(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>true</>

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = true).toBeLessThanOrEqualByteSize(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>true</>

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = undefined).not.toBeLessThanOrEqualByteSize(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has value: <red>undefined</>

Expected has value: <green>undefined</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual & expected expect(actual = undefined).toBeLessThanOrEqualByteSize(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a non-negative integer or non-negative bigint

Received has value: <red>undefined</>

Expected has value: <green>undefined</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = "").not.toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"\\"</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = "").toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"\\"</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = "42").not.toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"42\\"</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = "42").toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"42\\"</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = "foo").not.toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"foo\\"</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = "foo").toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  string
Received has value: <red>\\"foo\\"</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = /bar/).not.toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  regexp
Received has value: <red>/bar/</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = /bar/).toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  regexp
Received has value: <red>/bar/</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = []).not.toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  array
Received has value: <red>[]</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = []).toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  array
Received has value: <red>[]</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = [Function anonymous]).not.toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  function
Received has value: <red>[Function anonymous]</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = [Function anonymous]).toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  function
Received has value: <red>[Function anonymous]</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = {}).not.toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  object
Received has value: <red>{}</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = {}).toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  object
Received has value: <red>{}</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = -0).not.toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-0</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = -0).toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-0</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = -1).not.toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-1</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = -1).toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-1</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = -1n).not.toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  bigint
Received has value: <red>-1n</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = -1n).toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  bigint
Received has value: <red>-1n</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = -Infinity).not.toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-Infinity</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = -Infinity).toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>-Infinity</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = 0.1).not.toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>0.1</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = 0.1).toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>0.1</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = Infinity).not.toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>Infinity</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = Infinity).toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>Infinity</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = NaN).not.toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>NaN</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = NaN).toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  number
Received has value: <red>NaN</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = Symbol(vore)).not.toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  symbol
Received has value: <red>Symbol(vore)</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = Symbol(vore)).toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  symbol
Received has value: <red>Symbol(vore)</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = false).not.toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>false</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = false).toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>false</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = null).not.toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has value: <red>null</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = null).toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has value: <red>null</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = true).not.toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>true</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = true).toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has type:  boolean
Received has value: <red>true</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = undefined).not.toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has value: <red>undefined</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type actual expect(actual = undefined).toBeLessThanOrEqualByteSize(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a non-negative integer or non-negative bigint

Received has value: <red>undefined</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).not.toBeLessThanOrEqualByteSize(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).not.toBeLessThanOrEqualByteSize(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).not.toBeLessThanOrEqualByteSize(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).not.toBeLessThanOrEqualByteSize(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).not.toBeLessThanOrEqualByteSize(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).not.toBeLessThanOrEqualByteSize(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).not.toBeLessThanOrEqualByteSize(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).not.toBeLessThanOrEqualByteSize(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).not.toBeLessThanOrEqualByteSize(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).not.toBeLessThanOrEqualByteSize(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).not.toBeLessThanOrEqualByteSize(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).not.toBeLessThanOrEqualByteSize(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).not.toBeLessThanOrEqualByteSize(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).not.toBeLessThanOrEqualByteSize(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).not.toBeLessThanOrEqualByteSize(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).not.toBeLessThanOrEqualByteSize(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).not.toBeLessThanOrEqualByteSize(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has value: <green>null</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).not.toBeLessThanOrEqualByteSize(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).not.toBeLessThanOrEqualByteSize(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has value: <green>undefined</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).toBeLessThanOrEqualByteSize(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).toBeLessThanOrEqualByteSize(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).toBeLessThanOrEqualByteSize(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).toBeLessThanOrEqualByteSize(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).toBeLessThanOrEqualByteSize(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).toBeLessThanOrEqualByteSize(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).toBeLessThanOrEqualByteSize(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).toBeLessThanOrEqualByteSize(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).toBeLessThanOrEqualByteSize(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).toBeLessThanOrEqualByteSize(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).toBeLessThanOrEqualByteSize(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).toBeLessThanOrEqualByteSize(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).toBeLessThanOrEqualByteSize(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).toBeLessThanOrEqualByteSize(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).toBeLessThanOrEqualByteSize(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).toBeLessThanOrEqualByteSize(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).toBeLessThanOrEqualByteSize(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has value: <green>null</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).toBeLessThanOrEqualByteSize(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBeLessThanOrEqualByteSize() invalid type expected expect(…).toBeLessThanOrEqualByteSize(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeLessThanOrEqualByteSize<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a non-negative integer or non-negative bigint

Expected has value: <green>undefined</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = "").not.toBytesEqual(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  string
Received has value: <red>\\"\\"</>

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = "").toBytesEqual(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  string
Received has value: <red>\\"\\"</>

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = "42").not.toBytesEqual(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  string
Received has value: <red>\\"42\\"</>

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = "42").toBytesEqual(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  string
Received has value: <red>\\"42\\"</>

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = "foo").not.toBytesEqual(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  string
Received has value: <red>\\"foo\\"</>

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = "foo").toBytesEqual(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  string
Received has value: <red>\\"foo\\"</>

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = /bar/).not.toBytesEqual(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  regexp
Received has value: <red>/bar/</>

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = /bar/).toBytesEqual(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  regexp
Received has value: <red>/bar/</>

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = []).not.toBytesEqual(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  array
Received has value: <red>[]</>

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = []).toBytesEqual(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  array
Received has value: <red>[]</>

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = [Function anonymous]).not.toBytesEqual(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  function
Received has value: <red>[Function anonymous]</>

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = [Function anonymous]).toBytesEqual(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  function
Received has value: <red>[Function anonymous]</>

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = {}).not.toBytesEqual(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  object
Received has value: <red>{}</>

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = {}).toBytesEqual(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  object
Received has value: <red>{}</>

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = -0).not.toBytesEqual(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>-0</>

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = -0).toBytesEqual(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>-0</>

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = -1).not.toBytesEqual(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>-1</>

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = -1).toBytesEqual(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>-1</>

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = -1n).not.toBytesEqual(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  bigint
Received has value: <red>-1n</>

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = -1n).toBytesEqual(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  bigint
Received has value: <red>-1n</>

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = -Infinity).not.toBytesEqual(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>-Infinity</>

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = -Infinity).toBytesEqual(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>-Infinity</>

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = 0.1).not.toBytesEqual(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>0.1</>

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = 0.1).toBytesEqual(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>0.1</>

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = Infinity).not.toBytesEqual(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>Infinity</>

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = Infinity).toBytesEqual(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>Infinity</>

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = NaN).not.toBytesEqual(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>NaN</>

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = NaN).toBytesEqual(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>NaN</>

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = Symbol(vore)).not.toBytesEqual(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  symbol
Received has value: <red>Symbol(vore)</>

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = Symbol(vore)).toBytesEqual(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  symbol
Received has value: <red>Symbol(vore)</>

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = false).not.toBytesEqual(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  boolean
Received has value: <red>false</>

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = false).toBytesEqual(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  boolean
Received has value: <red>false</>

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = null).not.toBytesEqual(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has value: <red>null</>

Expected has value: <green>null</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = null).toBytesEqual(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has value: <red>null</>

Expected has value: <green>null</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = true).not.toBytesEqual(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  boolean
Received has value: <red>true</>

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = true).toBytesEqual(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  boolean
Received has value: <red>true</>

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = undefined).not.toBytesEqual(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has value: <red>undefined</>

Expected has value: <green>undefined</>"
`;

exports[`.toBytesEqual() invalid type actual & expected expect(actual = undefined).toBytesEqual(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> and <green>expected</> values must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has value: <red>undefined</>

Expected has value: <green>undefined</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = "").not.toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  string
Received has value: <red>\\"\\"</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = "").toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  string
Received has value: <red>\\"\\"</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = "42").not.toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  string
Received has value: <red>\\"42\\"</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = "42").toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  string
Received has value: <red>\\"42\\"</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = "foo").not.toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  string
Received has value: <red>\\"foo\\"</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = "foo").toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  string
Received has value: <red>\\"foo\\"</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = /bar/).not.toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  regexp
Received has value: <red>/bar/</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = /bar/).toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  regexp
Received has value: <red>/bar/</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = []).not.toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  array
Received has value: <red>[]</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = []).toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  array
Received has value: <red>[]</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = [Function anonymous]).not.toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  function
Received has value: <red>[Function anonymous]</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = [Function anonymous]).toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  function
Received has value: <red>[Function anonymous]</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = {}).not.toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  object
Received has value: <red>{}</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = {}).toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  object
Received has value: <red>{}</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = -0).not.toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>-0</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = -0).toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>-0</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = -1).not.toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>-1</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = -1).toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>-1</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = -1n).not.toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  bigint
Received has value: <red>-1n</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = -1n).toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  bigint
Received has value: <red>-1n</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = -Infinity).not.toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>-Infinity</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = -Infinity).toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>-Infinity</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = 0.1).not.toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>0.1</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = 0.1).toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>0.1</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = Infinity).not.toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>Infinity</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = Infinity).toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>Infinity</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = NaN).not.toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>NaN</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = NaN).toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  number
Received has value: <red>NaN</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = Symbol(vore)).not.toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  symbol
Received has value: <red>Symbol(vore)</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = Symbol(vore)).toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  symbol
Received has value: <red>Symbol(vore)</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = false).not.toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  boolean
Received has value: <red>false</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = false).toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  boolean
Received has value: <red>false</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = null).not.toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has value: <red>null</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = null).toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has value: <red>null</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = true).not.toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  boolean
Received has value: <red>true</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = true).toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has type:  boolean
Received has value: <red>true</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = undefined).not.toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has value: <red>undefined</>"
`;

exports[`.toBytesEqual() invalid type actual expect(actual = undefined).toBytesEqual(…) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Received has value: <red>undefined</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).not.toBytesEqual(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).not.toBytesEqual(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).not.toBytesEqual(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).not.toBytesEqual(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).not.toBytesEqual(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).not.toBytesEqual(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).not.toBytesEqual(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).not.toBytesEqual(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).not.toBytesEqual(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).not.toBytesEqual(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).not.toBytesEqual(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).not.toBytesEqual(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).not.toBytesEqual(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).not.toBytesEqual(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).not.toBytesEqual(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).not.toBytesEqual(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).not.toBytesEqual(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has value: <green>null</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).not.toBytesEqual(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).not.toBytesEqual(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has value: <green>undefined</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).toBytesEqual(expected = "") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  string
Expected has value: <green>\\"\\"</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).toBytesEqual(expected = "42") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  string
Expected has value: <green>\\"42\\"</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).toBytesEqual(expected = "foo") 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  string
Expected has value: <green>\\"foo\\"</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).toBytesEqual(expected = /bar/) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  regexp
Expected has value: <green>/bar/</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).toBytesEqual(expected = []) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  array
Expected has value: <green>[]</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).toBytesEqual(expected = [Function anonymous]) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  function
Expected has value: <green>[Function anonymous]</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).toBytesEqual(expected = {}) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  object
Expected has value: <green>{}</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).toBytesEqual(expected = -0) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  number
Expected has value: <green>-0</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).toBytesEqual(expected = -1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  number
Expected has value: <green>-1</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).toBytesEqual(expected = -1n) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  bigint
Expected has value: <green>-1n</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).toBytesEqual(expected = -Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  number
Expected has value: <green>-Infinity</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).toBytesEqual(expected = 0.1) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  number
Expected has value: <green>0.1</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).toBytesEqual(expected = Infinity) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  number
Expected has value: <green>Infinity</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).toBytesEqual(expected = NaN) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  number
Expected has value: <green>NaN</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).toBytesEqual(expected = Symbol(vore)) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  symbol
Expected has value: <green>Symbol(vore)</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).toBytesEqual(expected = false) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  boolean
Expected has value: <green>false</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).toBytesEqual(expected = null) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has value: <green>null</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).toBytesEqual(expected = true) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has type:  boolean
Expected has value: <green>true</>"
`;

exports[`.toBytesEqual() invalid type expected expect(…).toBytesEqual(expected = undefined) 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBytesEqual<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a TypedArray, DataView, ArrayBuffer, or SharedArrayBuffer

Expected has value: <green>undefined</>"
`;
