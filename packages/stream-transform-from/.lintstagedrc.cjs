// @ts-check

const path = require('path');

const baseConfig = require('../../.lintstagedrc.cjs');

/**
 * @param {string} pathname
 * @returns {string}
 */
function p(pathname) {
  return path.resolve(__dirname, pathname);
}

/**
 * @param  {[string, ...string[]]} searchFilepathList
 * @returns {function(string): boolean}
 */
function filepathFilter(...searchFilepathList) {
  const searchFileFullpathList = searchFilepathList.map(p);
  return filename => searchFileFullpathList.includes(path.resolve(filename));
}

/**
 * @template T
 * @param {(readonly T[])[]} arrayList
 * @returns {T[]}
 */
function unique(...arrayList) {
  return [...new Set(arrayList.flat())];
}

/**
 * @type {import('../../.lintstagedrc.cjs').LintStagedConfig}
 */
module.exports = async filenames => {
  /** @type {string[]} */
  const scriptsList = [];
  /** @type {string[]} */
  const updateFilepathList = [];

  const autogeneratedTypeTestfileList = [
    'test-d/source-type.test-d.ts',
  ];
  if (
    filenames.some(filepathFilter(
      'scripts/generate-type-test-cases.js',
      ...autogeneratedTypeTestfileList,
    ))
  ) {
    scriptsList.push('build:type-test');
    updateFilepathList.push(...autogeneratedTypeTestfileList);
  }

  /** @type {string[]} */
  const commands = [];
  if (scriptsList.length > 0) {
    commands.push(...scriptsList.map(s => `pnpm run ${s}`));
  }

  const updateFileFullpathList = updateFilepathList.map(p);
  commands.push(...(await baseConfig(unique(filenames, updateFileFullpathList))));
  if (updateFileFullpathList.length > 0) {
    commands.push(`git add ${updateFileFullpathList.join(' ')}`);
  }

  return commands;
};
