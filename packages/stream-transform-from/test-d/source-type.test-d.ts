// This file was autogenerated by ../scripts/generate-type-test-cases.js
// dprint-ignore-file

import type * as stream from 'stream';

import { expectType } from 'tsd';

import { transformFrom } from '..';

declare const bool: boolean;
declare const transformOpts: stream.TransformOptions;
declare const falseIndexSignature: Record<string, false>;
declare const trueIndexSignature: Record<string, true>;
declare const boolIndexSignature: Record<string, boolean>;

/* eslint-disable require-yield */

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, {});

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, transformOpts);

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, falseIndexSignature);

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, trueIndexSignature);

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, boolIndexSignature);

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { readableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, readableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { readableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { readableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { readableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { readableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, readableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { readableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { readableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { readableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { readableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, readableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { readableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { readableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { readableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { readableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, readableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { readableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { readableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { readableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: undefined, readableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, readableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, readableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, readableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, readableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: undefined, readableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, readableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, readableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, readableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, readableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: undefined, readableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, readableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, readableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, readableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, readableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: undefined, readableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, readableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, readableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, readableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, readableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: undefined, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: undefined, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: undefined, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: undefined, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: false, readableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: false, readableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, readableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, readableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, readableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: false, readableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: false, readableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, readableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, readableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, readableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: false, readableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: false, readableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, readableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, readableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, readableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: false, readableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: false, readableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, readableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, readableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, readableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: false, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { ...transformOpts, objectMode: false, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: false, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { ...transformOpts, objectMode: false, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: false, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: false, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: false, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: false, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, readableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, readableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, readableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, readableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, readableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, readableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, readableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, readableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, readableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, readableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, readableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, readableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, readableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, readableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, readableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, readableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, readableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, readableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, readableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, readableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, readableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, readableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, readableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, readableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, readableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, readableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, readableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, readableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, readableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, readableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, readableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, readableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, readableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, readableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, readableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, readableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, readableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, readableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, readableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, readableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { readableObjectMode: undefined, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, readableObjectMode: undefined, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { readableObjectMode: undefined, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { readableObjectMode: undefined, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { readableObjectMode: undefined, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { readableObjectMode: undefined, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, readableObjectMode: undefined, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { readableObjectMode: undefined, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { readableObjectMode: undefined, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { readableObjectMode: undefined, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { readableObjectMode: undefined, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, readableObjectMode: undefined, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { readableObjectMode: undefined, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { readableObjectMode: undefined, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { readableObjectMode: undefined, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { readableObjectMode: undefined, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, readableObjectMode: undefined, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { readableObjectMode: undefined, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { readableObjectMode: undefined, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { readableObjectMode: undefined, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { readableObjectMode: false, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, readableObjectMode: false, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { readableObjectMode: false, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { readableObjectMode: false, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { readableObjectMode: false, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { readableObjectMode: false, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, readableObjectMode: false, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { readableObjectMode: false, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { readableObjectMode: false, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { readableObjectMode: false, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { readableObjectMode: false, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, readableObjectMode: false, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { readableObjectMode: false, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { readableObjectMode: false, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { readableObjectMode: false, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { readableObjectMode: false, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, readableObjectMode: false, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { readableObjectMode: false, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { readableObjectMode: false, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { readableObjectMode: false, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { readableObjectMode: true, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, readableObjectMode: true, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { readableObjectMode: true, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { readableObjectMode: true, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { readableObjectMode: true, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { readableObjectMode: true, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, readableObjectMode: true, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { readableObjectMode: true, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { readableObjectMode: true, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { readableObjectMode: true, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { readableObjectMode: true, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, readableObjectMode: true, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { readableObjectMode: true, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { readableObjectMode: true, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { readableObjectMode: true, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { readableObjectMode: true, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, readableObjectMode: true, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { readableObjectMode: true, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { readableObjectMode: true, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { readableObjectMode: true, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { readableObjectMode: bool, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, readableObjectMode: bool, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { readableObjectMode: bool, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { readableObjectMode: bool, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { readableObjectMode: bool, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { readableObjectMode: bool, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, readableObjectMode: bool, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { readableObjectMode: bool, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { readableObjectMode: bool, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { readableObjectMode: bool, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { readableObjectMode: bool, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, readableObjectMode: bool, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { readableObjectMode: bool, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { readableObjectMode: bool, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { readableObjectMode: bool, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { readableObjectMode: bool, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, readableObjectMode: bool, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { readableObjectMode: bool, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { readableObjectMode: bool, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { readableObjectMode: bool, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: undefined, readableObjectMode: undefined, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, readableObjectMode: undefined, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, readableObjectMode: undefined, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, readableObjectMode: undefined, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, readableObjectMode: undefined, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: undefined, readableObjectMode: undefined, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, readableObjectMode: undefined, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, readableObjectMode: undefined, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, readableObjectMode: undefined, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, readableObjectMode: undefined, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: undefined, readableObjectMode: undefined, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, readableObjectMode: undefined, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, readableObjectMode: undefined, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, readableObjectMode: undefined, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, readableObjectMode: undefined, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: undefined, readableObjectMode: undefined, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, readableObjectMode: undefined, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, readableObjectMode: undefined, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, readableObjectMode: undefined, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, readableObjectMode: undefined, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: undefined, readableObjectMode: false, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, readableObjectMode: false, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, readableObjectMode: false, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, readableObjectMode: false, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, readableObjectMode: false, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: undefined, readableObjectMode: false, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, readableObjectMode: false, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, readableObjectMode: false, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, readableObjectMode: false, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, readableObjectMode: false, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: undefined, readableObjectMode: false, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, readableObjectMode: false, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, readableObjectMode: false, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, readableObjectMode: false, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, readableObjectMode: false, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: undefined, readableObjectMode: false, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, readableObjectMode: false, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, readableObjectMode: false, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, readableObjectMode: false, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, readableObjectMode: false, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: undefined, readableObjectMode: true, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, readableObjectMode: true, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, readableObjectMode: true, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, readableObjectMode: true, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, readableObjectMode: true, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: undefined, readableObjectMode: true, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, readableObjectMode: true, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, readableObjectMode: true, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, readableObjectMode: true, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, readableObjectMode: true, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: undefined, readableObjectMode: true, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, readableObjectMode: true, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, readableObjectMode: true, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, readableObjectMode: true, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, readableObjectMode: true, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: undefined, readableObjectMode: true, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, readableObjectMode: true, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, readableObjectMode: true, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, readableObjectMode: true, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, readableObjectMode: true, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: undefined, readableObjectMode: bool, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, readableObjectMode: bool, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, readableObjectMode: bool, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, readableObjectMode: bool, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, readableObjectMode: bool, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: undefined, readableObjectMode: bool, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, readableObjectMode: bool, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, readableObjectMode: bool, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, readableObjectMode: bool, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, readableObjectMode: bool, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: undefined, readableObjectMode: bool, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, readableObjectMode: bool, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, readableObjectMode: bool, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, readableObjectMode: bool, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, readableObjectMode: bool, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: undefined, readableObjectMode: bool, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: undefined, readableObjectMode: bool, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: undefined, readableObjectMode: bool, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: undefined, readableObjectMode: bool, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: undefined, readableObjectMode: bool, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: false, readableObjectMode: undefined, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { ...transformOpts, objectMode: false, readableObjectMode: undefined, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, readableObjectMode: undefined, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, readableObjectMode: undefined, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, readableObjectMode: undefined, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: false, readableObjectMode: undefined, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { ...transformOpts, objectMode: false, readableObjectMode: undefined, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, readableObjectMode: undefined, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, readableObjectMode: undefined, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, readableObjectMode: undefined, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: false, readableObjectMode: undefined, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: false, readableObjectMode: undefined, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, readableObjectMode: undefined, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, readableObjectMode: undefined, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, readableObjectMode: undefined, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: false, readableObjectMode: undefined, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: false, readableObjectMode: undefined, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, readableObjectMode: undefined, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, readableObjectMode: undefined, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, readableObjectMode: undefined, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: false, readableObjectMode: false, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { ...transformOpts, objectMode: false, readableObjectMode: false, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, readableObjectMode: false, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, readableObjectMode: false, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, readableObjectMode: false, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: false, readableObjectMode: false, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { ...transformOpts, objectMode: false, readableObjectMode: false, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, readableObjectMode: false, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, readableObjectMode: false, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, readableObjectMode: false, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: false, readableObjectMode: false, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: false, readableObjectMode: false, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, readableObjectMode: false, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, readableObjectMode: false, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, readableObjectMode: false, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: false, readableObjectMode: false, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: false, readableObjectMode: false, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, readableObjectMode: false, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, readableObjectMode: false, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, readableObjectMode: false, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: false, readableObjectMode: true, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { ...transformOpts, objectMode: false, readableObjectMode: true, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, readableObjectMode: true, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, readableObjectMode: true, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, readableObjectMode: true, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: false, readableObjectMode: true, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { ...transformOpts, objectMode: false, readableObjectMode: true, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, readableObjectMode: true, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, readableObjectMode: true, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, readableObjectMode: true, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: false, readableObjectMode: true, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: false, readableObjectMode: true, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, readableObjectMode: true, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, readableObjectMode: true, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, readableObjectMode: true, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: false, readableObjectMode: true, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: false, readableObjectMode: true, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, readableObjectMode: true, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, readableObjectMode: true, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, readableObjectMode: true, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: false, readableObjectMode: bool, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { ...transformOpts, objectMode: false, readableObjectMode: bool, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, readableObjectMode: bool, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, readableObjectMode: bool, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, readableObjectMode: bool, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { objectMode: false, readableObjectMode: bool, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, { ...transformOpts, objectMode: false, readableObjectMode: bool, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, readableObjectMode: bool, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, readableObjectMode: bool, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `Buffer`. because the `objectMode` and `writableObjectMode` options are not `true`
		expectType<Buffer>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, readableObjectMode: bool, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: false, readableObjectMode: bool, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: false, readableObjectMode: bool, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, readableObjectMode: bool, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, readableObjectMode: bool, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, readableObjectMode: bool, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: false, readableObjectMode: bool, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: false, readableObjectMode: bool, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: false, readableObjectMode: bool, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: false, readableObjectMode: bool, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `writableObjectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: false, readableObjectMode: bool, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, readableObjectMode: undefined, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, readableObjectMode: undefined, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, readableObjectMode: undefined, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, readableObjectMode: undefined, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, readableObjectMode: undefined, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, readableObjectMode: undefined, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, readableObjectMode: undefined, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, readableObjectMode: undefined, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, readableObjectMode: undefined, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, readableObjectMode: undefined, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, readableObjectMode: undefined, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, readableObjectMode: undefined, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, readableObjectMode: undefined, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, readableObjectMode: undefined, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, readableObjectMode: undefined, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, readableObjectMode: undefined, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, readableObjectMode: undefined, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, readableObjectMode: undefined, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, readableObjectMode: undefined, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, readableObjectMode: undefined, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, readableObjectMode: false, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, readableObjectMode: false, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, readableObjectMode: false, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, readableObjectMode: false, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, readableObjectMode: false, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, readableObjectMode: false, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, readableObjectMode: false, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, readableObjectMode: false, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, readableObjectMode: false, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, readableObjectMode: false, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, readableObjectMode: false, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, readableObjectMode: false, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, readableObjectMode: false, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, readableObjectMode: false, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, readableObjectMode: false, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, readableObjectMode: false, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, readableObjectMode: false, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, readableObjectMode: false, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, readableObjectMode: false, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, readableObjectMode: false, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, readableObjectMode: true, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, readableObjectMode: true, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, readableObjectMode: true, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, readableObjectMode: true, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, readableObjectMode: true, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, readableObjectMode: true, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, readableObjectMode: true, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, readableObjectMode: true, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, readableObjectMode: true, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, readableObjectMode: true, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, readableObjectMode: true, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, readableObjectMode: true, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, readableObjectMode: true, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, readableObjectMode: true, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, readableObjectMode: true, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, readableObjectMode: true, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, readableObjectMode: true, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, readableObjectMode: true, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, readableObjectMode: true, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, readableObjectMode: true, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, readableObjectMode: bool, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, readableObjectMode: bool, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, readableObjectMode: bool, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, readableObjectMode: bool, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, readableObjectMode: bool, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, readableObjectMode: bool, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, readableObjectMode: bool, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, readableObjectMode: bool, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, readableObjectMode: bool, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, readableObjectMode: bool, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, readableObjectMode: bool, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, readableObjectMode: bool, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, readableObjectMode: bool, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, readableObjectMode: bool, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, readableObjectMode: bool, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: true, readableObjectMode: bool, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: true, readableObjectMode: bool, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: true, readableObjectMode: bool, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: true, readableObjectMode: bool, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: true, readableObjectMode: bool, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, readableObjectMode: undefined, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, readableObjectMode: undefined, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, readableObjectMode: undefined, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, readableObjectMode: undefined, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, readableObjectMode: undefined, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, readableObjectMode: undefined, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, readableObjectMode: undefined, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, readableObjectMode: undefined, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, readableObjectMode: undefined, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, readableObjectMode: undefined, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, readableObjectMode: undefined, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, readableObjectMode: undefined, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, readableObjectMode: undefined, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, readableObjectMode: undefined, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, readableObjectMode: undefined, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, readableObjectMode: undefined, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, readableObjectMode: undefined, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, readableObjectMode: undefined, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, readableObjectMode: undefined, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, readableObjectMode: undefined, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, readableObjectMode: false, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, readableObjectMode: false, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, readableObjectMode: false, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, readableObjectMode: false, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, readableObjectMode: false, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, readableObjectMode: false, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, readableObjectMode: false, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, readableObjectMode: false, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, readableObjectMode: false, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, readableObjectMode: false, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, readableObjectMode: false, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, readableObjectMode: false, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, readableObjectMode: false, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, readableObjectMode: false, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, readableObjectMode: false, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, readableObjectMode: false, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, readableObjectMode: false, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, readableObjectMode: false, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, readableObjectMode: false, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, readableObjectMode: false, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, readableObjectMode: true, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, readableObjectMode: true, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, readableObjectMode: true, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, readableObjectMode: true, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, readableObjectMode: true, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, readableObjectMode: true, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, readableObjectMode: true, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, readableObjectMode: true, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, readableObjectMode: true, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, readableObjectMode: true, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, readableObjectMode: true, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, readableObjectMode: true, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, readableObjectMode: true, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, readableObjectMode: true, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, readableObjectMode: true, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, readableObjectMode: true, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, readableObjectMode: true, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, readableObjectMode: true, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, readableObjectMode: true, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, readableObjectMode: true, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, readableObjectMode: bool, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, readableObjectMode: bool, writableObjectMode: undefined });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, readableObjectMode: bool, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, readableObjectMode: bool, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, readableObjectMode: bool, writableObjectMode: undefined } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, readableObjectMode: bool, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, readableObjectMode: bool, writableObjectMode: false });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, readableObjectMode: bool, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, readableObjectMode: bool, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` option is probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, readableObjectMode: bool, writableObjectMode: false } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, readableObjectMode: bool, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, readableObjectMode: bool, writableObjectMode: true });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, readableObjectMode: bool, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, readableObjectMode: bool, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, readableObjectMode: bool, writableObjectMode: true } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { objectMode: bool, readableObjectMode: bool, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, { ...transformOpts, objectMode: bool, readableObjectMode: bool, writableObjectMode: bool });

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(falseIndexSignature, { objectMode: bool, readableObjectMode: bool, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(trueIndexSignature, { objectMode: bool, readableObjectMode: bool, writableObjectMode: bool } as const));

transformFrom(async function*(source) {
	for await (const { chunk } of source) {
		// chunk type is `unknown`. because the `objectMode` and `writableObjectMode` options are probably `true`
		expectType<unknown>(chunk);
	}
}, Object.assign(boolIndexSignature, { objectMode: bool, readableObjectMode: bool, writableObjectMode: bool } as const));

/* eslint-enable */