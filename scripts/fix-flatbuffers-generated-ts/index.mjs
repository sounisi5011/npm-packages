#!/usr/bin/env node
// @ts-check

/*
 * Fix import statement & insert `// @ts-nocheck` comment
 */

import fs from 'node:fs';
import { promisify } from 'node:util';

import { awaitMainFn } from '@sounisi5011/cli-utils-top-level-await';

const flatBuffersGeneratedFileRegexp =
  /^(\s*\/\/ automatically generated by the FlatBuffers compiler, do not modify(?:(?!\n)\s)*\n)((?:(?:(?!\n)\s)*\n)*)(?:(import\s+\{\s*flatbuffers\s*\}\s+from\s+(["'`]))\.\/flatbuffers(\4(?:\s*;)?(?:(?!\n)\s)*\n))?/;

/**
 * @param {string} filename
 */
async function fixImport(filename) {
  const fileText = await promisify(fs.readFile)(filename, 'utf8');
  const replacedText = fileText.replace(
    flatBuffersGeneratedFileRegexp,
    (_, prefixComment, prefixLineBreaks, importBefore, _quoteChar, importAfter) => {
      console.error(`Process ${filename}`);

      const prefix = `${prefixComment}// @ts-nocheck\n${prefixLineBreaks}`;
      if (importBefore && importAfter) {
        return `${prefix}${importBefore}flatbuffers${importAfter}`;
      }
      return `${prefix}import { flatbuffers } from "flatbuffers"\n`;
    },
  );

  if (fileText !== replacedText) {
    await promisify(fs.writeFile)(filename, replacedText);
  }
}

async function main() {
  const [, , ...filenameList] = process.argv;
  await Promise.all(filenameList.map(fixImport));
}

awaitMainFn(main);
